// Generated by mkhdr

#ifndef HEADER_GDT
#define HEADER_GDT

#include <stdbool.h>


// ---- セグメントの属性を表す数値
#define SEG_TYPE_CODE       0x9A
#define SEG_TYPE_DATA       0x92
#define SEG_TYPE_STACK      0x96
#define SEG_TYPE_LDT        0x82
#define SEG_TYPE_TSS        0x89
// #define SEG_TYPE_TSS_BUSY   0x8B
#define SEG_TYPE_CALL_GATE  0x84
#define SEG_TYPE_INTR_GATE  0x8E
#define SEG_TYPE_TRAP_GATE  0x8F
#define SEG_TYPE_TASK_GATE  0x85


// ---- セグメントの32ビット属性を表す数値
// SEG32_BIG_SEGはset_gate_descで自動で設定する
#define SEG32_BIG_SEG       0x80 ///< リミットの数値をページ単位(4KB)ととらえる
// #define SEG32_SMALL_SEG     0x00

#define SEG32_CODE386       0x40
#define SEG32_DATA386       0x40
// #define SEG32_CODE286       0x00


#define KERNEL_DS  (1 << 3)  // カーネルのデータセグメントのセレクタ値
#define KERNEL_CS  (2 << 3)  // カーネルのコードセグメントのセレクタ値
#define USER_DS    (3 << 3)  // アプリケーションのデータセグメントのセレクタ値
#define USER_CS    (4 << 3)  // アプリケーションのコードセグメントのセレクタ値
#define SEG_TSS    5         // TSSをGDTの何番から割当てるのか


struct TSS;
void gdt_init(void);
void set_seg_desc(int no, unsigned long addr,
        unsigned long limit, int segtype, int seg32type, int dpl);
void set_code_seg(int no, unsigned long addr, unsigned long limit, int dpl);
void set_data_seg(int no, unsigned long addr, unsigned long limit, int dpl);

#endif
