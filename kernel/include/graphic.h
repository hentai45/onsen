// Generated by mkhdr

#ifndef HEADER_GRAPHIC
#define HEADER_GRAPHIC

typedef unsigned short COLOR16;
typedef unsigned long  COLOR32;

#define RGB32(r, g, b) ((COLOR32) (((r) & 0xFF) << 16) | (((g) & 0xFF) << 8) | ((b) & 0xFF))
#define RGB16(r, g, b) ((COLOR16) (((r) & 0xF8) << 8) | (((g) & 0xFC) << 3) | (((b) & 0xF8) >> 3))
#define RGB32_TO_16(rgb32)  ((COLOR16) (((rgb32) & 0xF80000) >> 8) | (((rgb32) & 0xFC00) >> 5) | (((rgb32) & 0xF8) >> 3))
#define RGB16_TO_32(rgb16)  ((COLOR32) (((rgb16) & 0xF800) << 8) | (((rgb16) & 0x07E0) << 5) | (((rgb16) & 0x001F) << 3))

#define GET_RED32(rgb)   (((rgb) & 0xFF0000) >> 16)
#define GET_GREEN32(rgb) (((rgb) & 0x00FF00) >> 8)
#define GET_BLUE32(rgb)  ((rgb) & 0x0000FF)

#define GET_RED16(rgb)   (((rgb) & 0xF800) >> 8)
#define GET_GREEN16(rgb) (((rgb) & 0x07E0) >> 3)
#define GET_BLUE16(rgb)  (((rgb) & 0x001F) << 3)

#define COL_BLACK    (0x000000)
#define COL_RED      (0xFF0000)
#define COL_GREEN    (0x00FF00)
#define COL_BLUE     (0x0000FF)
#define COL_WHITE    (0xFFFFFF)

#include <stdbool.h>
#include "gbuffer.h"

#define ERROR_SID      (-1)
#define NO_PARENT_SID  (-2)

#define BORDER_WIDTH      (4)
#define TITLE_BAR_HEIGHT  (20)
#define WINDOW_EXT_WIDTH  (BORDER_WIDTH * 2)
#define WINDOW_EXT_HEIGHT (TITLE_BAR_HEIGHT + (BORDER_WIDTH * 2))

#define CLIENT_X  (BORDER_WIDTH)
#define CLIENT_Y  (TITLE_BAR_HEIGHT + BORDER_WIDTH)

#define HANKAKU_W (8)   // 半角フォントの幅
#define HANKAKU_H (16)  // 半角フォントの高さ

enum {
    OP_SRC_COPY,
    OP_SRC_INVERT
};

typedef struct _POINT {
    int x, y;
} POINT;

extern int g_vram_sid;
extern int g_dt_sid;


void minimal_graphic_init(void *vram, int w, int h, int color_width);
void graphic_init(void);

int  new_surface(int parent_sid, int w, int h);
int  new_surface_from_buf(int parent_sid, int w, int h, void *buf, int color_width);

int  new_window(int x, int y, int w, int h, char *title);
int  new_window_from_buf(int x, int y, int w, int h, char *title,
        void *buf, int color_width);

void free_surface(int sid);
void free_task_surface(int pid);

int  get_screen_w(void);
int  get_screen_h(void);

void set_surface_pos(int sid, int x, int y);
void move_surface(int sid, int x, int y);

void update_surface(int sid);
void update_window(int pid);
void update_from_buf(void);
void update_rect(int sid, int x, int y, int w, int h);
void update_char(int sid, int x, int y);
void update_text(int sid, int x, int y, int len);

void draw_surface(int src_sid, int dst_sid, int x, int y, int op);
void draw_surface2(int src_sid, int dst_sid, int op);

void fill_surface(int sid, COLOR32 color);
void fill_rect(int sid, int x, int y, int w, int h, COLOR32 color);
void draw_text(int sid, int x, int y, COLOR32 color, const char *text);
void draw_text_bg(int sid, int x, int y, COLOR32 color,
        COLOR32 bg_color, const char *text);

void draw_pixel(int sid, unsigned int x, unsigned int y, COLOR32 color);

void draw_line(int sid, int x0, int y0, int x1, int y1, COLOR32 color);

void erase_char(int sid, int x, int y, COLOR32 color, bool update);

void scroll_surface(int sid, int cx, int cy);

void set_colorkey(int sid, COLOR32 colorkey);
void clear_colorkey(int sid);
void set_alpha(int sid, unsigned char alpha);
void clear_alpha(int sid);

void set_mouse_pos(int x, int y);

void graphic_left_down(int x, int y);
void graphic_left_up(int x, int y);
void graphic_left_drag(int x, int y);

void switch_window(void);

void graphic_dbg(void);

#endif
