// Generated by mkhdr

#ifndef HEADER_ELF
#define HEADER_ELF

#include <stdbool.h>

typedef unsigned int    Elf32_Addr;
typedef unsigned short  Elf32_Half;
typedef unsigned int    Elf32_Off;
typedef int             Elf32_Sword;
typedef unsigned int    Elf32_Word;

//-----------------------------------------------------------------------------

#define EI_NIDENT   (16)

// ELF ヘッダ
typedef struct Elf_Ehdr {
    unsigned char e_ident[EI_NIDENT];  // マジックナンバなど
    Elf32_Half    e_type;              // ファイルタイプ
    Elf32_Half    e_machine;           // マシンアーキテクチャ
    Elf32_Word    e_version;           // ELF バージョン
    Elf32_Addr    e_entry;             // エントリポイント
    Elf32_Off     e_phoff;             // プログラムヘッダのオフセット
    Elf32_Off     e_shoff;             // セクションヘッダのオフセット
    Elf32_Word    e_flags;             // 未使用
    Elf32_Half    e_ehsize;            // ELF ヘッダのサイズ（バイト）
    Elf32_Half    e_phentsize;         // プログラムヘッダエントリのサイズ
    Elf32_Half    e_phnum;             // プログラムヘッダエントリの数
    Elf32_Half    e_shentsize;         // セクションヘッダエントリのサイズ
    Elf32_Half    e_shnum;             // セクションヘッダエントリの数
    Elf32_Half    e_shstrndx;          // セクション名格納用セクション
} Elf_Ehdr;


// ---- Elf_Ehdr.e_ident
inline __attribute__ ((always_inline))
bool is_elf(Elf_Ehdr *ehdr)
{
    return (ehdr->e_ident[0] == 0x7F && ehdr->e_ident[1] == 'E' &&
            ehdr->e_ident[2] == 'L'  && ehdr->e_ident[3] == 'F');
}


// ---- Elf_Ehdr.e_entry
#define ET_EXEC   2


//-----------------------------------------------------------------------------

/// プログラムヘッダ
typedef struct Elf_Phdr {
    Elf32_Word    p_type;
    Elf32_Off     p_offset;    // ファイル先頭からのセグメント位置
    Elf32_Addr    p_vaddr;     // ロード先の仮想アドレス
    Elf32_Addr    p_paddr;     // ロード先の物理アドレス
    Elf32_Word    p_filesz;    // ファイル中でのセグメントのサイズ
    Elf32_Word    p_memsz;     // メモリ上でのセグメントのサイズ
    Elf32_Word    p_flags;
    Elf32_Word    p_align;
} Elf_Phdr;


// ---- Elf_Phdr.p_type
#define PT_LOAD    1


// ---- Elf_Phdr.p_flags
#define PF_R        0x4
#define PF_W        0x2
#define PF_X        0x1


//-----------------------------------------------------------------------------

/// セクションヘッダ
typedef struct Elf_Shdr {
    Elf32_Word    sh_name;        // セクション名の格納位置
    Elf32_Word    sh_type;
    Elf32_Word    sh_flags;
    Elf32_Addr    sh_addr;        // ロード先仮想アドレス
    Elf32_Off     sh_offset;      // ファイル先頭からのセクション位置
    Elf32_Word    sh_size;        // セクションのサイズ（バイト）
    Elf32_Word    sh_link;
    Elf32_Word    sh_info;
    Elf32_Word    sh_addralign;
    Elf32_Word    sh_entsize;
} Elf_Shdr;


inline __attribute__ ((always_inline))
bool has_section(Elf_Phdr *phdr, Elf_Shdr *shdr)
{
    return (phdr->p_vaddr <= shdr->sh_addr &&
            shdr->sh_addr + shdr->sh_size <= phdr->p_vaddr + phdr->p_memsz);
}

int elf_load(void *p, unsigned int size);

#endif
