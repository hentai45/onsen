// Generated by mkhdr

#ifndef HEADER_TASK
#define HEADER_TASK

#include <stdbool.h>
#include "file.h"
#include "paging.h"

#define ERROR_PID        (-1)

#define TASK_MAX         (32)  // 最大タスク数
#define FILE_TABLE_SIZE  (16)

#define TASK_FLG_FREE     (0)   // 割り当てなし
#define TASK_FLG_ALLOC    (1)   // 割り当て済み
#define TASK_FLG_RUNNING  (2)   // 動作中

#define TSS_REG_SIZE (104)  // TSS のレジスタ保存部のサイズ

#define EFLAGS_INT_ENABLE   (0x0202)  // 割り込みが有効
#define EFLAGS_INT_DISABLE  (0x0002)  // 割り込みが無効

#define TASK_NAME_MAX  (16)   // タスク名の最大長 + '\0'

#define DEFAULT_STACK0_SIZE  (8 * 1024)
#define DEFAULT_TIMESLICE_MS  (20)


typedef struct TSS {
    // ---- レジスタ保存部

    short backlink; short f1;
    long esp0; unsigned short ss0; short f2;
    long esp1; unsigned short ss1; short f3;
    long esp2; unsigned short ss2; short f4;
    unsigned long cr3, eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;
    unsigned short es, f5, cs, f6, ss, f7, ds, f8, fs, f9, gs, f10;
    unsigned short ldt, f11, t, iobase;


    // ---- OS 用タスク管理情報部

    int pid;   // プロセス ID
    int ppid;  // 親 PID

    unsigned int flags;

    /* ページディレクトリ。CR3に入っているのは
     * 物理アドレスなのでアクセスできない。こっちは論理アドレス */
    PDE *pd;

    char name[TASK_NAME_MAX];
    int timeslice_ms;

    // メモリ
    unsigned long code;
    unsigned long data;
    // OSタスクなら普通のスタック。アプリならOS権限時のスタック
    unsigned long stack;
    unsigned long stack_size;

    // ファイルテーブル
    FTE file_table[FILE_TABLE_SIZE];

    bool is_os_task;
} __attribute__ ((__packed__)) TSS;


typedef struct TASK_MNG {
    // 記憶領域の確保用。
    // tss のインデックスと PID は同じ
    TSS tss[TASK_MAX];

    int num_running;
    int cur_run;  // 現在実行しているタスクの run でのインデックス
    TSS *run[TASK_MAX];
} TASK_MNG;


void task_init(void);
int  task_new(char *name);
int  task_free(int pid, int exit_status);
int  chopsticks(void);
void task_run(int pid, int timeslice_ms);
int  task_run_app(void *p, unsigned int size, const char *name);
void task_switch(int ts_tid);
void task_sleep(int pid);
void task_wakeup(int pid);
int run_os_task(char *name, void (*main)(void));
const char *task_get_name(int pid);
void task_set_pt(int i_pd, unsigned long pt);

void task_dbg(void);

int get_free_fd(void);
FILE_T *task_get_file(int fd);
int task_set_file(int fd, FILE_T *f);

int is_os_task(int pid);

// TODO: 一時的にstaticをはずしてグローバルにしている
void set_app_tss(int pid, PDE maddr_pd, PDE vaddr_pd, void (*f)(void), void *esp, void *esp0);
TSS *pid2tss(int pid);

extern TSS *g_cur;
extern int g_pid;

extern int g_root_pid;
extern int g_idle_pid;

#endif
