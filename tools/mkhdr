#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''

機能
----
C言語のソースファイルから、"#ifndef HEADER_"で始まる行から"#endif"までを
抜き出してヘッダファイルとして出力する。


なぜつくったか？
----------------
C言語のソースファイルの先頭に、そのヘッダファイルの内容も含めるため。

例 : util.c
    #ifndef HEADER_UTIL
    #define HEADER_UTIL
       // ここにヘッダ情報を書く
    #endif
    // 通常のプログラムを書く


使用方法
--------
./mkhdr src_file output_header_file


メリット
--------
・ヘッダ情報が目次になって見やすい
・ソースファイル中でヘッダ情報を編集できるから楽


デメリットと対策
----------------
・ヘッダ情報が多くなれば見難くなる
  -> ソースファイルから独立させればいい（いつも通りのやり方に戻す）。

・mkhdrを使うソースファイルと使わないソースファイルを混ぜた場合、
  ソースファイルとヘッダファイルのどっちを編集するか判断する必要がある
  -> ソースファイル先頭のヘッダ情報の有無で判断する。
     または、ヘッダファイル先頭の "// Created by mkhdr" の有無で判断する。

・コンパイル前に処理時間が少しかかる
  -> がまんする

'''


from os import listdir, stat
from os.path import exists, isdir, join, splitext
from sys import argv


def main(src_d, dst_d):
    if not (exists(src_d) and exists(dst_d) and isdir(src_d) and isdir(dst_d)):
        return

    for src_f in listdir(src_d):
        if isdir(src_f):
            continue

        if src_f.endswith('.c') or src_f.endswith('.s') or src_f.endswith('.S'):
            dst_f = join(dst_d, splitext(src_f)[0]) + '.h'
            src_f = join(src_d, src_f)

            make_header(src_f, dst_f)


def make_header(src_f, dst_f):
    if exists(dst_f) and stat(src_f).st_mtime < stat(dst_f).st_mtime:
        return

    in_header = False
    for line in open(src_f, 'r'):
        if in_header is False and line.startswith('#ifndef HEADER_'):
            in_header = True
            f = open(dst_f, 'w')
            f.write('// Generated by mkhdr\n\n')

        if in_header:
            f.write(line)
            if line.startswith('#endif'):
                f.close()
                return


if __name__ == '__main__':
    main(argv[1], argv[2])

